ARM GAS  C:\Users\SOLDER~1\AppData\Local\Temp\ccH9kNOi.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"sysmem.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.bss.__sbrk_heap_end,"aw",%nobits
  18              		.align	2
  21              	__sbrk_heap_end:
  22 0000 00000000 		.space	4
  23              		.section	.text._sbrk,"ax",%progbits
  24              		.align	1
  25              		.global	_sbrk
  26              		.syntax unified
  27              		.code	16
  28              		.thumb_func
  30              	_sbrk:
  31              	.LFB0:
  32              		.file 1 "Core/Src/sysmem.c"
   1:Core/Src/sysmem.c **** /**
   2:Core/Src/sysmem.c ****  ******************************************************************************
   3:Core/Src/sysmem.c ****  * @file      sysmem.c
   4:Core/Src/sysmem.c ****  * @author    Generated by STM32CubeIDE
   5:Core/Src/sysmem.c ****  * @brief     STM32CubeIDE System Memory calls file
   6:Core/Src/sysmem.c ****  *
   7:Core/Src/sysmem.c ****  *            For more information about which C functions
   8:Core/Src/sysmem.c ****  *            need which of these lowlevel functions
   9:Core/Src/sysmem.c ****  *            please consult the newlib libc manual
  10:Core/Src/sysmem.c ****  ******************************************************************************
  11:Core/Src/sysmem.c ****  * @attention
  12:Core/Src/sysmem.c ****  *
  13:Core/Src/sysmem.c ****  * Copyright (c) 2021 STMicroelectronics.
  14:Core/Src/sysmem.c ****  * All rights reserved.
  15:Core/Src/sysmem.c ****  *
  16:Core/Src/sysmem.c ****  * This software is licensed under terms that can be found in the LICENSE file
  17:Core/Src/sysmem.c ****  * in the root directory of this software component.
  18:Core/Src/sysmem.c ****  * If no LICENSE file comes with this software, it is provided AS-IS.
  19:Core/Src/sysmem.c ****  *
  20:Core/Src/sysmem.c ****  ******************************************************************************
  21:Core/Src/sysmem.c ****  */
  22:Core/Src/sysmem.c **** 
  23:Core/Src/sysmem.c **** /* Includes */
  24:Core/Src/sysmem.c **** #include <errno.h>
  25:Core/Src/sysmem.c **** #include <stdint.h>
  26:Core/Src/sysmem.c **** 
  27:Core/Src/sysmem.c **** /**
  28:Core/Src/sysmem.c ****  * Pointer to the current high watermark of the heap usage
ARM GAS  C:\Users\SOLDER~1\AppData\Local\Temp\ccH9kNOi.s 			page 2


  29:Core/Src/sysmem.c ****  */
  30:Core/Src/sysmem.c **** static uint8_t *__sbrk_heap_end = NULL;
  31:Core/Src/sysmem.c **** 
  32:Core/Src/sysmem.c **** /**
  33:Core/Src/sysmem.c ****  * @brief _sbrk() allocates memory to the newlib heap and is used by malloc
  34:Core/Src/sysmem.c ****  *        and others from the C library
  35:Core/Src/sysmem.c ****  *
  36:Core/Src/sysmem.c ****  * @verbatim
  37:Core/Src/sysmem.c ****  * ############################################################################
  38:Core/Src/sysmem.c ****  * #  .data  #  .bss  #       newlib heap       #          MSP stack          #
  39:Core/Src/sysmem.c ****  * #         #        #                         # Reserved by _Min_Stack_Size #
  40:Core/Src/sysmem.c ****  * ############################################################################
  41:Core/Src/sysmem.c ****  * ^-- RAM start      ^-- _end                             _estack, RAM end --^
  42:Core/Src/sysmem.c ****  * @endverbatim
  43:Core/Src/sysmem.c ****  *
  44:Core/Src/sysmem.c ****  * This implementation starts allocating at the '_end' linker symbol
  45:Core/Src/sysmem.c ****  * The '_Min_Stack_Size' linker symbol reserves a memory for the MSP stack
  46:Core/Src/sysmem.c ****  * The implementation considers '_estack' linker symbol to be RAM end
  47:Core/Src/sysmem.c ****  * NOTE: If the MSP stack, at any point during execution, grows larger than the
  48:Core/Src/sysmem.c ****  * reserved size, please increase the '_Min_Stack_Size'.
  49:Core/Src/sysmem.c ****  *
  50:Core/Src/sysmem.c ****  * @param incr Memory size
  51:Core/Src/sysmem.c ****  * @return Pointer to allocated memory
  52:Core/Src/sysmem.c ****  */
  53:Core/Src/sysmem.c **** void *_sbrk(ptrdiff_t incr)
  54:Core/Src/sysmem.c **** {
  33              		.loc 1 54 1
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 24
  36              		@ frame_needed = 1, uses_anonymous_args = 0
  37 0000 80B5     		push	{r7, lr}
  38              		.cfi_def_cfa_offset 8
  39              		.cfi_offset 7, -8
  40              		.cfi_offset 14, -4
  41 0002 86B0     		sub	sp, sp, #24
  42              		.cfi_def_cfa_offset 32
  43 0004 00AF     		add	r7, sp, #0
  44              		.cfi_def_cfa_register 7
  45 0006 7860     		str	r0, [r7, #4]
  55:Core/Src/sysmem.c ****   extern uint8_t _end; /* Symbol defined in the linker script */
  56:Core/Src/sysmem.c ****   extern uint8_t _estack; /* Symbol defined in the linker script */
  57:Core/Src/sysmem.c ****   extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  58:Core/Src/sysmem.c ****   const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  46              		.loc 1 58 32
  47 0008 144A     		ldr	r2, .L5
  48              		.loc 1 58 53
  49 000a 154B     		ldr	r3, .L5+4
  50              		.loc 1 58 18
  51 000c D31A     		subs	r3, r2, r3
  52 000e 7B61     		str	r3, [r7, #20]
  59:Core/Src/sysmem.c ****   const uint8_t *max_heap = (uint8_t *)stack_limit;
  53              		.loc 1 59 18
  54 0010 7B69     		ldr	r3, [r7, #20]
  55 0012 3B61     		str	r3, [r7, #16]
  60:Core/Src/sysmem.c ****   uint8_t *prev_heap_end;
  61:Core/Src/sysmem.c **** 
  62:Core/Src/sysmem.c ****   /* Initialize heap end at first call */
ARM GAS  C:\Users\SOLDER~1\AppData\Local\Temp\ccH9kNOi.s 			page 3


  63:Core/Src/sysmem.c ****   if (NULL == __sbrk_heap_end)
  56              		.loc 1 63 12
  57 0014 134B     		ldr	r3, .L5+8
  58 0016 1B68     		ldr	r3, [r3]
  59              		.loc 1 63 6
  60 0018 002B     		cmp	r3, #0
  61 001a 02D1     		bne	.L2
  64:Core/Src/sysmem.c ****   {
  65:Core/Src/sysmem.c ****     __sbrk_heap_end = &_end;
  62              		.loc 1 65 21
  63 001c 114B     		ldr	r3, .L5+8
  64 001e 124A     		ldr	r2, .L5+12
  65 0020 1A60     		str	r2, [r3]
  66              	.L2:
  66:Core/Src/sysmem.c ****   }
  67:Core/Src/sysmem.c **** 
  68:Core/Src/sysmem.c ****   /* Protect heap from growing into the reserved MSP stack */
  69:Core/Src/sysmem.c ****   if (__sbrk_heap_end + incr > max_heap)
  67              		.loc 1 69 23
  68 0022 104B     		ldr	r3, .L5+8
  69 0024 1A68     		ldr	r2, [r3]
  70 0026 7B68     		ldr	r3, [r7, #4]
  71 0028 D318     		adds	r3, r2, r3
  72              		.loc 1 69 6
  73 002a 3A69     		ldr	r2, [r7, #16]
  74 002c 9A42     		cmp	r2, r3
  75 002e 07D2     		bcs	.L3
  70:Core/Src/sysmem.c ****   {
  71:Core/Src/sysmem.c ****     errno = ENOMEM;
  76              		.loc 1 71 5
  77 0030 FFF7FEFF 		bl	__errno
  78 0034 0300     		movs	r3, r0
  79              		.loc 1 71 11
  80 0036 0C22     		movs	r2, #12
  81 0038 1A60     		str	r2, [r3]
  72:Core/Src/sysmem.c ****     return (void *)-1;
  82              		.loc 1 72 12
  83 003a 0123     		movs	r3, #1
  84 003c 5B42     		rsbs	r3, r3, #0
  85 003e 09E0     		b	.L4
  86              	.L3:
  73:Core/Src/sysmem.c ****   }
  74:Core/Src/sysmem.c **** 
  75:Core/Src/sysmem.c ****   prev_heap_end = __sbrk_heap_end;
  87              		.loc 1 75 17
  88 0040 084B     		ldr	r3, .L5+8
  89 0042 1B68     		ldr	r3, [r3]
  90 0044 FB60     		str	r3, [r7, #12]
  76:Core/Src/sysmem.c ****   __sbrk_heap_end += incr;
  91              		.loc 1 76 19
  92 0046 074B     		ldr	r3, .L5+8
  93 0048 1A68     		ldr	r2, [r3]
  94 004a 7B68     		ldr	r3, [r7, #4]
  95 004c D218     		adds	r2, r2, r3
  96 004e 054B     		ldr	r3, .L5+8
  97 0050 1A60     		str	r2, [r3]
  77:Core/Src/sysmem.c **** 
ARM GAS  C:\Users\SOLDER~1\AppData\Local\Temp\ccH9kNOi.s 			page 4


  78:Core/Src/sysmem.c ****   return (void *)prev_heap_end;
  98              		.loc 1 78 10
  99 0052 FB68     		ldr	r3, [r7, #12]
 100              	.L4:
  79:Core/Src/sysmem.c **** }
 101              		.loc 1 79 1
 102 0054 1800     		movs	r0, r3
 103 0056 BD46     		mov	sp, r7
 104 0058 06B0     		add	sp, sp, #24
 105              		@ sp needed
 106 005a 80BD     		pop	{r7, pc}
 107              	.L6:
 108              		.align	2
 109              	.L5:
 110 005c 00000000 		.word	_estack
 111 0060 00000000 		.word	_Min_Stack_Size
 112 0064 00000000 		.word	__sbrk_heap_end
 113 0068 00000000 		.word	_end
 114              		.cfi_endproc
 115              	.LFE0:
 117              		.text
 118              	.Letext0:
 119              		.file 2 "c:\\dev_tools\\stm32_tools\\gnu-tools-for-stm32.12.3\\tools\\lib\\gcc\\arm-none-eabi\\10.
 120              		.file 3 "c:\\dev_tools\\stm32_tools\\gnu-tools-for-stm32.12.3\\tools\\arm-none-eabi\\include\\mach
 121              		.file 4 "c:\\dev_tools\\stm32_tools\\gnu-tools-for-stm32.12.3\\tools\\arm-none-eabi\\include\\sys\
ARM GAS  C:\Users\SOLDER~1\AppData\Local\Temp\ccH9kNOi.s 			page 5


DEFINED SYMBOLS
                            *ABS*:00000000 sysmem.c
C:\Users\SOLDER~1\AppData\Local\Temp\ccH9kNOi.s:18     .bss.__sbrk_heap_end:00000000 $d
C:\Users\SOLDER~1\AppData\Local\Temp\ccH9kNOi.s:21     .bss.__sbrk_heap_end:00000000 __sbrk_heap_end
C:\Users\SOLDER~1\AppData\Local\Temp\ccH9kNOi.s:24     .text._sbrk:00000000 $t
C:\Users\SOLDER~1\AppData\Local\Temp\ccH9kNOi.s:30     .text._sbrk:00000000 _sbrk
C:\Users\SOLDER~1\AppData\Local\Temp\ccH9kNOi.s:110    .text._sbrk:0000005c $d
                           .group:00000000 wm4.0.4c1577b45e89a7b63de7f514d8a51f3b
                           .group:00000000 wm4.errno.h.2.ba016d646105af6cad23be83630b6a3f
                           .group:00000000 wm4._newlib_version.h.4.bfdf54b0af045d4a71376ae00f63a22c
                           .group:00000000 wm4.newlib.h.34.314a350541e36f4baea3ec77033a1a03
                           .group:00000000 wm4.ieeefp.h.77.25247dc27dbe3b23bfe98c2dc18f6ac5
                           .group:00000000 wm4.features.h.22.fad1cec3bc7ff06488171438dbdcfd02
                           .group:00000000 wm4.config.h.224.79362c3cdb280fe0b8d95bd0bc4d5c54
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stddef.h.39.144cf5ddcd53cbfdac30259dc1a6c87f
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.155.3588ebfdd1e8c7ede80509bb9c3b8009
                           .group:00000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:00000000 wm4._types.h.127.34941de1b2539d59d5cac00e0dd27a45
                           .group:00000000 wm4.reent.h.17.e292bf8b0bec6c96e131a54347145a30
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.77.32fd7d280fc2a40b0797abce5beaf6e3
                           .group:00000000 wm4.assert.h.11.db24e541f16414db224bf986d21017e2
                           .group:00000000 wm4.reent.h.504.40d20ade344680fbcb6a0178bf7ae09e
                           .group:00000000 wm4.errno.h.14.6a5939d3ae7434a1e97991a97123b12d
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed

UNDEFINED SYMBOLS
__errno
_estack
_Min_Stack_Size
_end
